<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:ctx="http://www.dev-on.com/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
         http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
<!--          http://www.dev-on.com/schema/context http://www.dev-on.com/schema/context/devon-context-1.0.xsd"> -->

	<import resource="mvc-context-view.xml" />
	<!-- <import resource="context-config.xml" /> -->

	<!-- SSO/EAM 상태 모니터링 -->
	<!-- <bean id="ssoEamMonitor" class="amis3.fw.core.binding.validator.access.token.SsoEamMonitor">
		<constructor-arg value="10000" />
	</bean>

	<bean id="tokenValidator" class="amis3.fw.core.binding.validator.access.token.TokenValidator">
		<property name="ssoEamMonitor" ref="ssoEamMonitor" />
		<property name="ssoTokenPermittedSeconds" value="${accessPermissionMessageValidate.ssoTokenPermittedSeconds}" />
	</bean>

	<bean id="systemPermissionConfiguration" class="amis3.fw.core.binding.validator.access.AccessPermissionConfiguration">
		<property name="validateBy" value="VALIDATE_BY_SYSTEM" />
		<property name="permissionType" value="ALLOW" />
		<property name="checkTokenWhenAllowed" value="false" />
	</bean>

	외부시스템 서비스ID 관리 reloader
	<bean class="amis3.fw.core.binding.validator.access.SystemPermissionInfoReloader">
		<property name="accessPermissionConfiguration" ref="systemPermissionConfiguration" />
		<property name="dataSource" ref="amisDS" />
		<property name="reloadInterval" value="60000" />
	</bean>

	<bean id="accessPermissionMessageValidator" class="amis3.fw.core.binding.validator.access.AccessPermissionMessageValidator">
		<property name="validate" value="${accessPermissionMessageValidate}" />
		<property name="tokenValidator" ref="tokenValidator" />
		<property name="validationConfigurations">
			<list>
				로컬호스트 : 전체 서비스 SSO 체크없이 허용
				<bean class="amis3.fw.core.binding.validator.access.AccessPermissionConfiguration">
					<property name="validateBy" value="VALIDATE_BY_IP" />
					<property name="permissionType" value="ALLOW" />
					<property name="targetIPs">
						<list value-type="java.lang.String">
							<value>127.0.0.1</value>
							<value>0:0:0:0:0:0:0:1</value>
						</list>
					</property>
					<property name="url" value="*" />
					<property name="checkTokenWhenAllowed" value="false" />
					<property name="compareIPFromHeaderAndFromRequest" value="false" />
				</bean>
				내부 사용자 : 특정 서비스는 SSO 체크없이 허용
				<bean class="amis3.fw.core.binding.validator.access.AccessPermissionConfiguration">
					<property name="validateBy" value="VALIDATE_BY_IP" />
					<property name="permissionType" value="ALLOW" />
					<property name="targetIP" value="${accessPermissionMessageValidate.IP_INBOUND_CLIENTS}" />
					<property name="urls">
						<list value-type="java.lang.String">
							사용자가 PASSWORD분실 시 로그인 화면에서 재발급
							<value>SZZAN0403T</value>
							SSO가 문제가 생겨 직접 AMIS로 로그인
							<value>SZZAN0407T</value>
							비밀번호 재발급 시 사용자 정보 관련(임시로 허용한 상태로 추후 삭제 필요)
							<value>SZZAN0408R</value>
						</list>
					</property>
					<property name="checkTokenWhenAllowed" value="false" />
					<property name="compareIPFromHeaderAndFromRequest" value="false" />
					<property name="otherUrlPermissionType" value="CHECK_CONTINUE" />
				</bean>
				외부 시스템 : 전체 서비스 SSO 체크없이 허용
				<ref bean="systemPermissionConfiguration"/>
				AMIS3 서버간 호출은 모두 허용
				<bean class="amis3.fw.core.binding.validator.access.AccessPermissionConfiguration">
					<property name="validateBy" value="VALIDATE_BY_IP" />
					<property name="permissionType" value="ALLOW" />
					<property name="targetIP" value="${accessPermissionMessageValidate.IP_AMIS3}" />
					<property name="url" value="*" />
					<property name="checkTokenWhenAllowed" value="false" />
					<property name="compareIPFromHeaderAndFromRequest" value="false" />
				</bean>
				내부 사용자 : W* 서비스는 호출 거부
				<bean class="amis3.fw.core.binding.validator.access.AccessPermissionConfiguration">
					<property name="validateBy" value="VALIDATE_BY_IP" />
					<property name="permissionType" value="DENY" />
					<property name="targetIP" value="*" />
					<property name="url" value="W*" />
					<property name="checkTokenWhenAllowed" value="false" />
					<property name="compareIPFromHeaderAndFromRequest" value="false" />
				</bean>
				내부 사용자 : 그 외 서비스는 SSO 체크
				<bean class="amis3.fw.core.binding.validator.access.AccessPermissionConfiguration">
					<property name="validateBy" value="VALIDATE_BY_IP" />
					<property name="permissionType" value="ALLOW" />
					<property name="targetIP" value="*" />
					<property name="url" value="*" />
					<property name="checkTokenWhenAllowed" value="${accessPermissionMessageValidate.validateToken}" />
					<property name="compareIPFromHeaderAndFromRequest" value="false" />
				</bean>
			</list>
		</property>
	</bean>
	-->
 
	<bean id="studyJsonMessageConverter" class="study.fw.core.binding.JsonMessageConverter">
		<property name="inboundLogging" value="${msgConverterInboundLogging}" />
		<property name="outboundLogging" value="${msgConverterOutboundLogging}" />
		<property name="compressEnabled" value="${compressEnabled}" />
		<property name="compressThreshold" value="${compressThreshold}" />
		<property name="prettyPrint" value="${prettyPrint}" />
		<property name="messageValidators">
			<list>
				<ref bean="accessPermissionMessageValidator" />
			</list>
		</property>
	</bean>

<!--
	<mvc:annotation-driven validator="validator">
		<mvc:message-converters>
			<ref bean="amisJsonMessageConverter" />
		</mvc:message-converters>
		<mvc:argument-resolvers>
			<bean class="amis3.fw.core.binding.PreDataResolver" />
			<bean class="amis3.fw.core.binding.RecordSetResolver" />
		</mvc:argument-resolvers>
	</mvc:annotation-driven>

	<mvc:interceptors>
        <bean class="amis3.fw.online.context.ContextSettingInterceptor" />
    </mvc:interceptors>
 -->

	<!-- The below registers a RequestMappingHandlerMapping, a RequestMappingHandlerAdapter,
	and an ExceptionHandlerExceptionResolver (among others) in support of processing requests with annotated controller methods
	using annotations such as @RequestMapping, @ExceptionHandler, and others.  -->
	<mvc:annotation-driven/>

	<mvc:resources mapping="/study-online/resources/**" location="/study-online/resources/" />
	<mvc:resources mapping="/study-online/message/**" location="classpath:/study-online/message/" />

	<mvc:resources mapping="/webjars/**"
		location="classpath:/META-INF/resources/webjars/" />

	<mvc:view-controller path="/" view-name="welcome" />

	<mvc:default-servlet-handler />

	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- <bean id="applicationContextProvider" class="amis3.fw.core.context.ApplicationContextProvider" /> -->

 	<aop:aspectj-autoproxy />
	<bean id="controllerClassNameInfo" class="study.fw.online.aspect.StudyControllerClassNameAdvice" />

	<!-- 로컬 tomcat에서 기동 시에는 tomcat 기동성능 향상을 위해서 web.xml에서 amis3.fw.online.spring.bean.LazyAutowirableWebApplicationContext를 사용해서 실행 시에 Service, Dao 빈을 로딩한다. -->
<!--    	<beans profile="local">
		<context:component-scan base-package="study.fw.online.aspect" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator">
			<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
		</context:component-scan>
		<context:component-scan base-package="study" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator" resource-pattern="**/*Controller.class">
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		</context:component-scan>
		<context:component-scan base-package="study" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator" resource-pattern="**/*Service.class">
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
		</context:component-scan>
		<context:component-scan base-package="study" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator" resource-pattern="**/*Dao.class">
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
		</context:component-scan>
 	</beans>
 -->

<!-- 	<bean id="SampleController" class="study.zz.controller.SampleController" /> -->

     <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>


	<!-- dev,test,prod는 bean 정합성 및 실행성능을 위해서 component-scan 적용 -->
<!-- 	<beans profile="dev,test,prod"> -->
 		<context:component-scan base-package="study.fw.online.aspect" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator">
			<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
		</context:component-scan>
		<context:component-scan base-package="study" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator" resource-pattern="**/*Controller.class">
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		</context:component-scan>
		<context:component-scan base-package="study" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator" resource-pattern="**/*Service.class">
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
		</context:component-scan>
		<context:component-scan base-package="study" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator" resource-pattern="**/*Dao.class">
			<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
		</context:component-scan>
<!-- 	</beans> -->

</beans>

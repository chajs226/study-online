<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
         http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	<import resource="mvc-context-view.xml" />



 	<bean id="studyJsonMessageConverter" class="study.fw.core.binding.StudyJsonMessageConverter">
	</bean>


	<!-- 스프링에서 제공하는 mvc:annotation-driven 이 @requestBody, @responseBody 어노테이션을 만났을 때의 처리를 어떻게 하는지에 대한 설정을 하는 것인데, 
	         기본적으로 설정을 안하면 스프링에서 알아서 JSON에서 key, value로 꺼내서 VO에 넣고 하는 작업을 해줌, 하지만 자체 전문형식을 사용하려면 메시지 컨버터 부분에 
	     StudyJsonMessageConverter 를 통해서 처리한다고 설정해야함.
	     studyJsonMessageConverter 메시지 컨버터는 MappingJackson2HttpMessageConverter 를 상속받는데.. MappingJackson2HttpMessageConverter 
	        컨버터는 http 바디부에 있는 Json형태의 메시지를 @RequestBody 다음에 정의된 오브젝트 형식으로 변환하는 작업을 한다.
	     studyJsonMessageConverter 에 property로 messageValidators 들이 들어올텐데,, 메시지 컨버팅(read에서 처리) 후, messagevalidators
	       들에 의해서.. 메시지 validation 체크를 하게 될 것이다. 
	    org.springframework.validation.beanvalidation.LocalValidatorFactoryBean 의 validator 빈을 생성해서 로딩을 하고 있다.
	    추후,, 변수나 함수 앞에 @NotNull, @NotEmpty, @NotBlank 어노테이션을 붙여서,, validation 체크를 할 수 있다.         	       
     -->	
 	<mvc:annotation-driven validator="validator">	
		<mvc:message-converters>
			<ref bean="studyJsonMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- 빈검증을 위해서 사용한다. @NotNull, @NotEmpty, @NotBlank 등을 이용해서 빈 생성시 검증처리를 할 수 있다. 우리는 특별히.. 안쓰고 있는 듯. -->
  	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	

	<!-- <bean id="applicationContextProvider" class="study.fw.core.context.ApplicationContextProvider" /> -->
	
	<!-- 컨트롤러 앞단에서 스레드로컬 처리를 위해서 인터셉터로 구현함. --> 
	<mvc:interceptors>
        <bean class="study.fw.online.context.ContextSettingInterceptor" />
    </mvc:interceptors>

 
	<mvc:resources mapping="/study-online/resources/**" location="/study-online/resources/" />
	<mvc:resources mapping="/study-online/message/**" location="classpath:/study-online/message/" />

	<mvc:resources mapping="/webjars/**"
		location="classpath:/META-INF/resources/webjars/" />

	<mvc:view-controller path="/" view-name="welcome" />

<!-- 	<mvc:default-servlet-handler /> -->




	<!-- controller 앞단에 aop를 건 것인데,, http요청이 들어온 것의 정보를 컨텍스트홀더에 넣는 작업을 함. -->
 	<aop:aspectj-autoproxy />
	<bean id="controllerClassNameInfo" class="study.fw.online.aspect.StudyControllerClassNameAdvice" />


<!--     <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/> -->


	<!-- dev,test,prod는 bean 정합성 및 실행성능을 위해서 component-scan 적용 -->
	<!-- 어노테이션으로 설정된 controller, service, repository 등을 찾아서 빈 오브젝트로 생성해서 메모리에 올림 -->
	<context:component-scan base-package="study.fw.online.aspect" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator">
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	<context:component-scan base-package="study" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator" resource-pattern="**/*Controller.class">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<context:component-scan base-package="study" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator" resource-pattern="**/*Service.class">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	<context:component-scan base-package="study" use-default-filters="false" name-generator="study.fw.core.spring.bean.FullyQualifiedBeanNameGenerator" resource-pattern="**/*Dao.class">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
	</context:component-scan>


</beans>
